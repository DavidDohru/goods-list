{"version":3,"sources":["Components/FormControl/formControlPropTypes.js","Components/FormControl/FormControl.jsx","Components/ModalWindowDelete/ModalWindowDelete.jsx","Components/ModalWindowDelete/modalWindowPropTypes.js","Components/ListOfGoods/ListOfGoods.jsx","Components/ListOfGoods/listOfGoodsPropTypes.js","Components/Comments/Comments.jsx","Components/Comments/commentsPropTypes.js","App.js","reportWebVitals.js","index.js"],"names":["PropTypes","array","isRequired","func","number","FormControl","listOfUsers","setNameForDelete","nameForDelete","useState","cardName","setCardName","imageUrl","setImageUrl","count","setCount","weight","setWeight","description","setDescription","widthProduct","setWidthProduct","heightProduct","setHeightProduct","badLength","setBadLength","Form","className","Control","value","isInvalid","onChange","target","placeholder","InputGroup","Text","type","disabled","to","exact","onClick","length","name","width","height","localStorage","setItem","JSON","stringify","id","size","filter","x","addAndUpdateNewUser","Button","style","display","ModalWindowDelete","bool","object","smShow","setSmShow","removeComments","removeElement","idForRemove","setIdForRemove","users","Modal","show","onHide","Header","Title","Body","variant","undefined","ListOfGoods","listOfUseres","setListOfUsers","setListOfComments","listOfComments","searchCount","setSearchCount","searchName","setSearchName","useEffect","parse","getItem","item","filterByCount","toLowerCase","includes","map","CloseButton","Image","rounded","alt","src","Comments","string","idRemoveComments","comment","setIdRemoveComments","setComment","productId","index","comments","postId","isValid","as","rows","Feedback","date","Date","toLocaleString","addNewComments","App","idForDelete","setIdForDelete","clearPerson","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb1b380c.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nexport const formControlPropTypes = {\n  listOfUsers: PropTypes.array.isRequired,\n  setNameForDelete: PropTypes.func.isRequired,\n  nameForDelete: PropTypes.number.isRequired,\n};\n","import React,{ useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { Link } from \"react-router-dom\";\nimport './FormControl.scss';\nimport './formControlPropTypes';\nimport { \n  Form,\n  InputGroup,\n  Button,\n} from 'react-bootstrap';\nimport { formControlPropTypes } from './formControlPropTypes';\n\nexport const FormControl = ({listOfUsers,setNameForDelete,nameForDelete}) => {\n  const [cardName , setCardName] = useState('');\n  const [imageUrl, setImageUrl] = useState('');\n  const [count , setCount] = useState(0);\n  const [weight , setWeight] = useState(0);\n  const [description, setDescription] = useState('');\n  const [widthProduct , setWidthProduct] = useState(0);\n  const [heightProduct , setHeightProduct] = useState(0);\n  const [badLength , setBadLength] = useState(true);\n  const addAndUpdateNewUser = (\n    name,\n    imageUrl,\n    count,\n    weight,\n    description,\n    width,\n    height,\n    nameForDelete,\n  ) => {\n    if (listOfUsers.length) {\n      return localStorage.setItem('array',\n        JSON.stringify([\n          ...listOfUsers,\n        { \n          description,\n          id:  listOfUsers[listOfUsers.length-1].id + 1,\n          name,\n          imageUrl,\n          count,\n          weight,\n          size:{\n            width,\n            height,\n          }\n        }\n    ].filter(x =>  {\n      if (nameForDelete !== 0) {\n        return (x.id !== nameForDelete);\n      }\n      return x;\n    })));\n    }\n    else {\n      return localStorage.setItem('array', JSON.stringify([ { \n        description,\n        id: 1,\n        name,\n        imageUrl,\n        count,\n        weight,\n        size:{\n          width,\n          height,\n        }\n      }]));\n    }\n  }\n\n  return(\n  <Form className=\"Form\">\n    <Form.Control\n      value={cardName}\n      isInvalid={cardName? false : true}\n      onChange={({target}) => {\n        setCardName(target.value);\n        if(( imageUrl && target.value && description)) {\n          setBadLength(false);\n        } else {\n          setBadLength(true);\n        }\n      }}\n      placeholder=\"Enter the card name\"\n    />\n    <Form.Control \n      value={imageUrl}\n      isInvalid={imageUrl ? false : true}\n      onChange={({target})=> {\n        setImageUrl(target.value)\n        if((cardName && target.value && description)) {\n          setBadLength(false);\n        } else {\n          setBadLength(true);\n        }\n      }}\n      placeholder=\"Enter the imageUrl\"\n    />\n    <InputGroup>\n      <InputGroup.Text>Count of products</InputGroup.Text>\n        <Form.Control\n          value={count}\n          onChange={({target})=> setCount(target.value)}\n          type=\"number\"\n        />\n      </InputGroup>\n    <InputGroup>\n      <InputGroup.Text>Weight of products</InputGroup.Text>\n        <Form.Control\n          value={weight}\n          onChange={({target})=> setWeight(target.value)}\n          type=\"number\"\n        />\n      </InputGroup>\n    <InputGroup>\n      <InputGroup.Text>Description</InputGroup.Text>\n        <Form.Control\n          isInvalid={description ? false : true}\n          value={description}\n          onChange={({ target }) => {\n            setDescription(target.value);\n            if((imageUrl && cardName && target.value)) {\n              setBadLength(false);\n            } else {\n              setBadLength(true);\n            }\n          }}\n        />\n      </InputGroup>\n    <InputGroup>\n      <InputGroup.Text>Width of product</InputGroup.Text>\n        <Form.Control\n          type=\"number\"\n          value={widthProduct}\n          onChange={({ target }) => setWidthProduct(target.value)}\n        />\n      </InputGroup>\n    <InputGroup>\n      <InputGroup.Text>Height of product</InputGroup.Text>\n        <Form.Control\n          type=\"number\"\n          value={heightProduct}\n          onChange={({ target }) => setHeightProduct(target.value)}\n        />\n      </InputGroup>\n      <Link\n         disabled={badLength && true}\n          to={!badLength && \"/\"} exact\n          onClick={()=>{\n            if((cardName && imageUrl && description).length) {\n              addAndUpdateNewUser(\n                cardName,\n                imageUrl,\n                count,\n                weight,\n                description,\n                widthProduct,\n                heightProduct,\n                nameForDelete,\n              );\n              setImageUrl('');\n              setCardName('');\n              setWidthProduct(0);\n              setHeightProduct(0);\n              setDescription('');\n              setWeight(0);\n              setCount(0);\n              setNameForDelete(0);\n            }\n            setBadLength(true);\n        }}\n        >\n          <Button\n            style={{display:\"block\",width:\"100%\"}} \n            disabled={badLength && true}>Save</Button>\n        </Link>\n    </Form>\n  );\n};\nFormControl.propTypes = formControlPropTypes;\n\n","import React  from 'react';\nimport { Button, Modal } from 'react-bootstrap';\nimport { modalWondowPropTypes } from  './modalWindowPropTypes';\n\nexport const ModalWindowDelete = ({\n  smShow,\n  setSmShow,\n  removeComments,\n  removeElement,\n  idForRemove,\n  setIdForRemove,\n  users,\n}) => {\n  return(\n    <Modal\n      size=\"sm\"\n      show={smShow}\n      onHide={() => setSmShow(false)}\n    >\n      <Modal.Header>\n      <Modal.Title id=\"example-modal-sizes-title-sm\">\n        Are you sure want to delete it ?\n        (reload the page after deleting)\n      </Modal.Title>\n    </Modal.Header>\n    <Modal.Body className=\"button__form-container\">\n      <Button\n        variant=\"danger\"\n        onClick={() => {\n        removeElement(idForRemove);\n        setIdForRemove(0);\n        removeComments(undefined,users.id); \n        setSmShow(false);\n        }}\n      >\n        Submit\n      </Button>\n      <Button onClick={() => setSmShow(false)}>Cancel</Button>\n    </Modal.Body>\n  </Modal>\n  );\n};\n\nModalWindowDelete.propTypes = modalWondowPropTypes;","import PropTypes from 'prop-types';\n\nexport const modalWondowPropTypes = {\n    smShow : PropTypes.bool.isRequired ,\n    setSmShow: PropTypes.func.isRequired,\n    removeComments: PropTypes.func.isRequired,\n    removeElement: PropTypes.func.isRequired,\n    idForRemove: PropTypes.number.isRequired,\n    setIdForRemove: PropTypes.func.isRequired,\n    users: PropTypes.object.isRequired,\n};","import React , { useState } from 'react';\nimport { useEffect } from 'react';\nimport { ModalWindowDelete } from '../ModalWindowDelete/ModalWindowDelete';\nimport { CloseButton, Image, Form,InputGroup} from 'react-bootstrap';\nimport { Link } from \"react-router-dom\";\nimport { listOfGoodsPropTypes } from './listOfGoodsPropTypes';\n\nexport const ListOfGoods = ({\n  listOfUseres,\n  removeElement,\n  removeComments,\n  setListOfUsers,    //here we accept the parameters\n  setListOfComments,\n  listOfComments,\n}) => {\n\n  const [smShow, setSmShow] = useState(false);\n  const [searchCount , setSearchCount] = useState(0);\n  const [idForRemove,setIdForRemove] = useState(0);   //All necessary variables for \n  const [searchName, setSearchName] = useState('');   //filtering the list, and other needs\n\n\n  const filterByName = (array => {\n    if (searchName.length) {\n      return array.filter(item => item.name.toLowerCase()  //Function for filtering by name\n        .includes(searchName.toLowerCase()))\n    }\n    return array;\n  });\n\n  const filterByCount = (array) => {\n    if (+searchCount !== 0) {\n      return array.filter(item => item.count >= +searchCount);  //Here we filter by the amount of product\n    } else {\n      return array;\n    }\n  }\n\n  \n  useEffect(() => \n    setListOfUsers(JSON.parse(localStorage.getItem('array')))\n   ,[idForRemove]);\n   useEffect(()=>                                                       //Here we track changes in the list\n     setListOfComments((JSON.parse(localStorage.getItem('comments'))))  // and immediately render the changes\n    ,[listOfComments.length])\n\n  return (\n  <>\n    <div className=\"form__container\">\n    <InputGroup>\n        <InputGroup.Text>Filter by name</InputGroup.Text>\n          <Form.Control\n            className='modal__filter-title'\n            placeholder=\"filter by name\"                        //input for filtering the list by name\n            value={searchName}\n            onChange={({ target }) => setSearchName(target.value)}\n          />\n      </InputGroup>\n      <InputGroup>\n        <InputGroup.Text>Filter by count</InputGroup.Text>\n          <Form.Control\n            className='modal__filter-title'\n            type=\"number\"                                               //input for filtering the list by count\n            value={searchCount}\n            onChange={({ target }) => setSearchCount(target.value)}\n          />\n      </InputGroup>\n    </div>\n    {filterByCount(filterByName(listOfUseres)).map((users) => (  //here we read the list and in case of filtering at \n      <div                                             //once we call function for a filtration that it was at once\n        key={users.id} \n        className=\"card\"\n      >\n     <ModalWindowDelete\n       smShow={smShow}\n       setSmShow={setSmShow}                     //Modal window to confirm \n       removeComments={removeComments}           //publication in individual components\n       removeElement={removeElement}\n       idForRemove={idForRemove}\n       setIdForRemove={setIdForRemove}\n       users={users}\n     />\n        <CloseButton \n          onClick={() => {\n            setIdForRemove(users.id);        //Remove the element on the blade on the cross\n            setSmShow(true);\n          }}\n          className=\"card__button-close\"\n        />\n        <Image\n          rounded\n          alt={users.name}\n          src={users.imageUrl}\n          className=\"card__images\"\n          />\n        <div className=\"card__container\">\n          <h3>{users.name}</h3>\n          <p className={users.count? 'in_stock':'not_available'}>\n            {users.count\n              ? 'In stock'                     //Here we repeat each individual card with \n              :'Not available'                 //the ability to go to the information about this card\n            }                                        \n          </p>\n          <p>Count of products:{` ${users.count}`}</p>\n          <p>Weight:{` ${users.weight}g`}</p>\n        </div>\n        <Link\n          to={`/${users.id}`}\n          className=\"card__button-info\"\n        >\n          info\n        </Link>\n      </div>\n      ))\n      }\n    </>\n  );\n};\n\nListOfGoods.propTypes = listOfGoodsPropTypes;\n","import PropTypes from 'prop-types';\n\nexport const listOfGoodsPropTypes = {\n    listOfUseres: PropTypes.array.isRequired,\n    removeElement: PropTypes.func.isRequired,\n    removeComments: PropTypes.func.isRequired,\n    setListOfUsers: PropTypes.func.isRequired,\n    setListOfComments: PropTypes.func.isRequired,\n    listOfComments: PropTypes.array.isRequired,\n};\n","import React , { useEffect, Fragment } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { \n  Button,\n  Form,\n  CloseButton,\n} from 'react-bootstrap';\nimport { commentsPropTypes } from './commentsPropTypes';\n\nexport const Comments = ({\n  idRemoveComments,\n  comment,\n  setIdRemoveComments,\n  badLength,\n  setComment,\n  setBadLength,\n  users,\n  removeComments,\n  listOfComments,\n  setListOfComments,\n}) => {\n \n  useEffect(() => \n    setListOfComments(JSON.parse(localStorage.getItem('comments'))) //here we track changes in comments\n    ,[idRemoveComments,comment.length]);\n\n    const addNewComments = (comments=\"\",id) => {  //it's funky to add and update a comment\n      if (listOfComments.length) { \n        return localStorage.setItem('comments',\n          JSON.stringify([\n          ...listOfComments,\n          {\n            postId: listOfComments[listOfComments.length - 1].postId + 1, //here we save all previous comments\n            productId: id,                                                //and add a new one, the id of the comment\n            comments,                                                     //is equal to the id of the last element + 1,\n            date: new Date().toLocaleString()                             //this allows to make each id unique for each\n          }                                                                //element and to prevent problems in further \n        ]));                                                                  //use of the program.\n      } else {\n      return localStorage.setItem('comments',\n      JSON.stringify([\n        {\n          postId: 1,\n          productId: id,\n          comments: comment,                    //here we add the comment object itself\n          date: new Date().toLocaleString()\n        }\n      ]));\n    }\n  }\n\n  return (\n    <>\n      <ul>\n        {\n          listOfComments\n            .filter(item => item.productId === users.id)\n              .map((comment,index) => {\n                if (users.id === comment.productId) {\n                  return (\n                    <Fragment key={comment.postId}>\n                      Comment #{index + 1 }\n                      <div> By user id : {users.id}</div>                                {/* Here we review the list of comments*/}      \n                      <li className=\"card__full-list_comments\">                          {/* + check the comments of a particular*/}\n                        <div className=\"card__full-list_item\">{comment.comments}</div>    {/* user to view his comments */}\n                        <CloseButton\n                          onClick={()=> {                            //When we click on the cross, we delete the comment\n                            removeComments(comment.postId);          // and add it to the IdRemoveComments variable in order\n                            setIdRemoveComments(comment.postId);     //to track the changes in the state and use useEffect\n                          }}                                         // to immediately redo the changes.\n                        />\n                      </li>\n                    </Fragment>\n                    )\n                  }\n\n                  return comment;\n            })}\n        </ul>\n        <div className=\"card__full-contol_block\">\n          <Form.Control\n            isInvalid={(badLength) && true}     //Here it finds the forms we track variables in the form\n            isValid={(comment)&& true}          // we write in a state and we do validation on the empty comment\n            as=\"textarea\" rows={3}\n            onChange={({target})=> {\n            setComment(target.value);\n            if (target.value.length) {\n                setBadLength(false);\n            }\n            }}\n            value={comment}\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Please enter a comment (minimal length = 1). {/*In case of failed validation, please enter a comment*/} \n          </Form.Control.Feedback>\n          <Button\n            onClick={() => {\n              if (comment.length >= 1) {\n                addNewComments(comment, users.id);\n                setComment('');                    //Here we add a comment when you click\n                setBadLength(false);               // on the button in case of validation\n              } else {\n                setBadLength(true);\n              }\n            }}\n          >\n            Add comment\n          </Button>\n        </div>\n      </>\n    );\n};\n\nComments.propTypes = commentsPropTypes;\n","import PropTypes from 'prop-types';\n\nexport const commentsPropTypes = {\n  idRemoveComments: PropTypes.number.isRequired,\n  comment: PropTypes.string.isRequired,\n  setIdRemoveComments: PropTypes.func.isRequired,\n  badLength: PropTypes.bool.isRequired,\n  setComment: PropTypes.func.isRequired,\n  setBadLength: PropTypes.func.isRequired,\n  users: PropTypes.object.isRequired,\n  removeComments: PropTypes.func.isRequired,\n  listOfComments: PropTypes.array.isRequired,\n  setListOfComments: PropTypes.func.isRequired,\n};\n","import React , {  useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.scss';\nimport { FormControl } from './Components/FormControl/FormControl';\nimport { Button, CloseButton, Image } from 'react-bootstrap';\nimport { ListOfGoods } from './Components/ListOfGoods/ListOfGoods.jsx';\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport { Comments } from './Components/Comments/Comments';\n\nif((JSON.parse(localStorage.getItem('array'))) === null) {  // we check whether there are arrays in the                                                      \n  localStorage.setItem('array',JSON.stringify([]));         // cache for user storage\n}                                                           // if not, we create empty ones \nif(JSON.parse(localStorage.getItem('comments')) === null) {\n  localStorage.setItem('comments',JSON.stringify([]));\n}\nfunction App() {\n  const [listOfUsers,setListOfUsers] = useState((JSON.parse(localStorage.getItem('array'))));          //create all necessary variables for \n  const [listOfComments,setListOfComments] = useState((JSON.parse(localStorage.getItem('comments')))); //further creation of objects (user, comment)\n  const [idForDelete , setIdForDelete] = useState(0);                                                  //, and modification of these objects\n  const [idRemoveComments,setIdRemoveComments] = useState(0);\n  const [nameForDelete,setNameForDelete] = useState(0);\n  const [comment, setComment] = useState('');\n  const [badLength, setBadLength] = useState(false);\n\n  useEffect(() => \n    setListOfComments(JSON.parse(localStorage.getItem('comments'))),//track changes in the array of comments,\n    [idRemoveComments,comment.length,comment]);                     //delete, and length of the comment\n                                                                    //and in case of change automatically overwrite the object\n  const removeElement = (id) => {\n    return localStorage.setItem('array', \n    JSON.stringify(                                                 //Function for deleting card(element) by id click\n      listOfUsers.filter(element => element.id !== id)\n    )\n  );\n  }\n\nconst removeComments = (id,clearPerson) => {\n  if (clearPerson) {\n    return localStorage.setItem('comments', \n    JSON.stringify(\n      listOfComments.filter(comment => comment.productId !== clearPerson)   //Function for deleting comment by id click\n    )                                                                       //Also note that if a card has been deleted\n  );                                                                        //, the comments on that card will also be deleted\n  }\n  return localStorage.setItem('comments', \n    JSON.stringify(\n      listOfComments.filter(comment => comment.postId !== id)\n    )\n  );\n}\n\n\n  return(\n    <div>\n   <Switch>\n    <Route path=\"/\" exact>                         {/* Here we have indicated  */}\n      <div>                                        {/* on the main page there will */}\n        <Link                                       /* be a button to add new items */\n          className=\"form__product_add\"\n          to=\"/modalWindowForm\"\n        >\n          <Button\n            variant=\"outline-primary\"\n          >\n            New Product\n          </Button>\n        </Link>\n        <div className=\"all__card_container\">\n          <ListOfGoods\n            setListOfUsers={setListOfUsers}            /*Here we passed all the necessary variables*/\n            removeElement={removeElement}              /* in order to make a list in a separate component*/\n            removeComments={removeComments}\n            listOfComments={listOfComments}\n            setListOfComments={setListOfComments}\n            idForDelete={idForDelete}\n            setIdForDelete={setIdForDelete}\n            listOfUseres={listOfUsers}\n          />\n          </div>\n        </div>\n      </Route>\n      <Route path=\"/modalWindowForm\">                           {/*  Here we indicate that the link: */}\n        <div className=\"modal__window-form\">                    {/*  /modalWindowForm should be a form */}\n          <div className=\"modal__title-container\">              {/*  for adding new cards and also the */}\n            Add new card                                        {/* form we made in a separate component */}\n              <Link                                              /* as a separate logic */\n                to=\"/\"\n                exact\n              >\n                <CloseButton className=\"card__button-close\"/>\n              </Link>\n            </div>\n              <FormControl\n                removeComments={removeComments}\n                listOfUsers={listOfUsers}\n                nameForDelete={nameForDelete}                    /*component with forms */\n                setNameForDelete={setNameForDelete}\n              />\n        </div>\n      </Route>\n    {\n      listOfUsers.map(users => (\n      <Route\n        key={users.id} \n        path={`/${users.id}`}\n        exact\n      >\n        <Link                                     /*  Here we read users, and make for each */\n          to=\"/\"                                  /*  new page in the form of the current link */\n          exact                                   /*  + id of each card by means of library router */\n          >\n          <Button \n            variant=\"outline-danger\"\n            className=\"form__product_back\"\n          >\n            Back\n          </Button>\n        </Link>\n       <Link\n         to={`/${users.id}/edit`}                       /*here with the help of a reac router we add*/\n       >                                                {/*for each card we create an individual editing page*/}\n       <Button\n          variant=\"outline-success\"\n          className=\"form__product_edit\" \n          onClick={()=> setNameForDelete(users.id)}\n        >\n          Edit\n        </Button>\n       </Link>\n          <div className=\"card__full\">\n            <h1>{users.name}</h1>\n            <div className=\"card__full-container\">\n              <Image\n                rounded\n                className=\"card__full-img\"\n                alt={users.name}                    //Here is a picture and a  \n                src={users.imageUrl}                //full description of the product\n              />                                 \n              <div>\n                Description:\n                <p>{users.description}</p>\n                <p>Count: {users.count}</p>\n                <p>Weight: {users.weight}g</p>\n                <p className={users.count? 'in_stock':'not_available'}>\n                  {users.count\n                    ? 'In stock'\n                    :'Not available'\n                  }\n                </p>\n                <p>Size - Width: {users.size.width} Heigth: {users.size.height}</p>\n                <Comments\n                  idRemoveComments={idRemoveComments}         //here is a separate Comment component\n                  comment={comment}                           // in which the logic of adding and deleting\n                  removeComments={removeComments}             //comments for each individual user\n                  setIdRemoveComments={setIdRemoveComments}\n                  badLength={badLength}\n                  setComment={setComment}\n                  listOfComments={listOfComments}\n                  setListOfComments={setListOfComments}\n                  setBadLength={setBadLength}\n                  users={users}\n                />\n              </div>\n            </div>\n          </div>\n        </Route>\n      ))\n    }\n    {\n      listOfUsers.map(users=> (\n        <Route\n          key={users.id}                          //here is the form for editing the \n          path={`/${users.id}/`}                  //current item and the back button\n        >                                         {/*in case of editing cancellation*/}\n            <div className=\"modal__window-form\">\n              <Link\n                to={`/${users.id}`}\n              >\n                <Button variant=\"outline-danger\">Back</Button>\n              </Link>\n              <h2>Edit Form</h2>\n              <FormControl\n                listOfUsers={listOfUsers}\n                nameForDelete={nameForDelete}\n                setNameForDelete={setNameForDelete}\n              />\n            </div>\n        </Route>\n        ))\n      }\n    </Switch>\n  </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}